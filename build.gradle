group = 'com.strongloop';
version = '0.1.0'

buildscript {
  repositories {
      mavenCentral()
  }
  dependencies {
      classpath 'com.android.tools.build:gradle:0.5.+'
  }
}

apply plugin: 'android-library'

repositories {
    mavenLocal()
    mavenCentral()
}

android {
    compileSdkVersion 18
    buildToolsVersion "18.1.0"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 14
    }
}

dependencies {
    compile 'com.loopj.android:android-async-http:1.4.3'
    instrumentTestCompile 'com.google.guava:guava:15.0'
}

android.libraryVariants.all { variant ->
    task("generate${variant.name}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.plugin.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
    }
}

task androidReleaseJar(type: Jar, dependsOn: assembleRelease) {
    from "$buildDir/classes/release/"
}

/* TODO
task androidJavadocsJar(type: Jar) {
    classifier = 'javadoc'
    from tasks["generateReleaseJavadoc"].destinationDir
}
*/

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.allSource
}

artifacts {
    archives androidReleaseJar
    archives androidSourcesJar
/* TODO
    archives androidJavadocsJar
*/
}


apply plugin: 'maven-publish'
publishing {
    publications {
        maven(MavenPublication) {
            artifact androidReleaseJar
            // TODO: sources, javadocs

            pom.withXml {
                def root = asNode()
                def deps = new Node(root, 'dependencies')
                configurations.compile.allDependencies.each { dep ->
                    def node = new Node(deps, 'dependency')
                    new Node(node, 'groupId', dep.group)
                    new Node(node, 'artifactId', dep.name)
                    new Node(node, 'version', dep.version);
                }
            }
        }
    }
}
